/*
 * <!--
 *
 *     Copyright (C) 2015 Orange
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 * -->
 */

package com.orange.cloud.servicebroker.filter.securitygroups.filter;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

import com.orange.cloud.servicebroker.filter.securitygroups.domain.ImmutableCIDR;
import com.orange.cloud.servicebroker.filter.securitygroups.domain.ImmutablePort;
import com.orange.cloud.servicebroker.filter.securitygroups.domain.ImmutablePorts;
import com.orange.cloud.servicebroker.filter.securitygroups.domain.ImmutableTrustedDestination;
import com.orange.cloud.servicebroker.filter.securitygroups.domain.TrustedDestinationSpecification;
import org.cloudfoundry.client.CloudFoundryClient;
import org.cloudfoundry.client.v2.ClientV2Exception;
import org.cloudfoundry.client.v2.securitygroups.CreateSecurityGroupRequest;
import org.cloudfoundry.client.v2.securitygroups.CreateSecurityGroupResponse;
import org.cloudfoundry.client.v2.securitygroups.Protocol;
import org.cloudfoundry.client.v2.securitygroups.RuleEntity;
import org.cloudfoundry.client.v2.securitygroups.SecurityGroupEntity;
import org.cloudfoundry.client.v2.securitygroups.SecurityGroups;
import org.cloudfoundry.client.v2.servicebrokers.GetServiceBrokerRequest;
import org.cloudfoundry.client.v2.servicebrokers.GetServiceBrokerResponse;
import org.cloudfoundry.client.v2.servicebrokers.ServiceBrokerEntity;
import org.cloudfoundry.client.v2.servicebrokers.ServiceBrokers;
import org.cloudfoundry.client.v2.serviceinstances.GetServiceInstanceRequest;
import org.cloudfoundry.client.v2.serviceinstances.GetServiceInstanceResponse;
import org.cloudfoundry.client.v2.serviceinstances.ServiceInstanceEntity;
import org.cloudfoundry.client.v2.serviceinstances.ServiceInstances;
import org.cloudfoundry.client.v2.serviceplans.GetServicePlanRequest;
import org.cloudfoundry.client.v2.serviceplans.GetServicePlanResponse;
import org.cloudfoundry.client.v2.serviceplans.ServicePlanEntity;
import org.cloudfoundry.client.v2.serviceplans.ServicePlans;
import org.cloudfoundry.client.v2.services.GetServiceRequest;
import org.cloudfoundry.client.v2.services.GetServiceResponse;
import org.cloudfoundry.client.v2.services.ServiceEntity;
import org.cloudfoundry.client.v2.services.Services;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import reactor.core.publisher.Mono;

import org.springframework.boot.test.system.OutputCaptureRule;
import org.springframework.cloud.servicebroker.model.CloudFoundryContext;
import org.springframework.cloud.servicebroker.model.binding.BindResource;
import org.springframework.cloud.servicebroker.model.binding.CreateServiceInstanceAppBindingResponse;
import org.springframework.cloud.servicebroker.model.binding.CreateServiceInstanceBindingRequest;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.BDDMockito.given;

@RunWith(MockitoJUnitRunner.class)
public class CreateSecurityGroupTest {

    public static final String RULE_DESCRIPTION = "generated by sec group filter broker for service binding test-securitygroup-name to allow access to service instance service-instance-name created from service broker service-broker-name.";
    static final String TEST_URI_WITH_IP_ADDRESS = "mysql://127.0.0.1:3306/mydb?user=2106password=Uq3YCioVsO3Dbcp4";
    static final String TEST_URI_WITH_FQDN = "mysql://localhost:3306/mydb?user=2106password=Uq3YCioVsO3Dbcp4";
    static final String NO_HOST_URI = "mysql:///mydb?user=2106password=Uq3YCioVsO3Dbcp4";
    static final String NO_PORT_URI = "mysql://127.0.0.1/mydb?user=2106password=Uq3YCioVsO3Dbcp4";

    @Rule
    public OutputCaptureRule output = new OutputCaptureRule();
    @Mock
    CloudFoundryClient cloudFoundryClient;
    private CreateSecurityGroup createSecurityGroup;

    private static void givenServiceBroker(CloudFoundryClient cloudFoundryClient, String serviceBrokerId, String serviceBrokerName) {
        given(cloudFoundryClient.serviceBrokers()
                .get(GetServiceBrokerRequest.builder()
                        .serviceBrokerId(serviceBrokerId).build()))
                .willReturn(Mono
                        .just(GetServiceBrokerResponse.builder()
                                .entity(ServiceBrokerEntity.builder()
                                        .name(serviceBrokerName)
                                        .build())
                                .build()));
    }

    private static void givenServiceInstance(CloudFoundryClient cloudFoundryClient, String serviceInstanceId, String serviceInstanceName, String servicePlanId) {
        given(cloudFoundryClient.serviceInstances()
                .get(GetServiceInstanceRequest.builder()
                        .serviceInstanceId(serviceInstanceId)
                        .build()))
                .willReturn(Mono
                        .just(GetServiceInstanceResponse.builder()
                                .entity(ServiceInstanceEntity.builder()
                                        .name(serviceInstanceName)
                                        .servicePlanId(servicePlanId)
                                        .build())
                                .build()));
    }

    private static void givenServicePlan(CloudFoundryClient cloudFoundryClient, String servicePlanId, String serviceId) {
        given(cloudFoundryClient.servicePlans()
                .get(GetServicePlanRequest.builder()
                        .servicePlanId(servicePlanId)
                        .build()))
                .willReturn((Mono
                        .just(GetServicePlanResponse.builder()
                                .entity(ServicePlanEntity.builder()
                                        .serviceId(serviceId)
                                        .build())
                                .build())));
    }

    private static void givenService(CloudFoundryClient cloudFoundryClient, String serviceId, String serviceBrokerId) {
        given(cloudFoundryClient.services()
                .get(GetServiceRequest.builder()
                        .serviceId(serviceId)
                        .build()))
                .willReturn((Mono
                        .just(GetServiceResponse.builder()
                                .entity(ServiceEntity.builder()
                                        .serviceBrokerId(serviceBrokerId)
                                        .build())
                                .build())));
    }

    @Before
    public void init() {
        given(cloudFoundryClient.securityGroups())
                .willReturn(Mockito.mock(SecurityGroups.class));
        given(cloudFoundryClient.serviceBrokers())
                .willReturn(Mockito.mock(ServiceBrokers.class));
        given(cloudFoundryClient.serviceInstances())
                .willReturn(Mockito.mock(ServiceInstances.class));
        given(cloudFoundryClient.services())
                .willReturn(Mockito.mock(Services.class));
        given(cloudFoundryClient.servicePlans())
                .willReturn(Mockito.mock(ServicePlans.class));

        final TrustedDestinationSpecification trustedDestinationSpecification = new TrustedDestinationSpecification(
                ImmutableTrustedDestination.builder()
                        .hosts(ImmutableCIDR.of("127.0.0.1/29"))
                        .ports(ImmutablePorts.builder()
                                .addValue(ImmutablePort.of(3306))
                                .build())
                        .build());
        createSecurityGroup = new CreateSecurityGroup(cloudFoundryClient, trustedDestinationSpecification);
    }

    @Test
    public void should_create_security_group_for_a_service_key() {
        //Given a service key request
        //See https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#cloud-foundry-bind-resource-object
        BindResource bindResource = BindResource.builder()
            .properties("credential_client_id", "cc_service_key_client") //not actually used in our test, just here
            // to make test representative of real received content
            .build();
        //Given other prereqs, when request is received then security group is created
        //Sample request from logs
        /*
                2020-09-08T14:22:12.16+0200 [APP/PROC/WEB/0] OUT 2020-09-08 12:22:12.169 DEBUG 30 --- [nio-8080-exec-6] f.c.f.ServiceInstanceBindingFilterRunner : Running postBind on each filter from: [com.orange.cloud.servicebroker.filter.securitygroups.filter.CreateSecurityGroup@354dda0] for osb request: ServiceBrokerRequest{platformInstanceId='null', apiInfoLocation='api.redacted-domain.org/v2/info', originatingIdentity=Context{platform='cloudfoundry', properties={user_id=0fff310e-552c-4014-9943-d7acd9875865}}', requestIdentity=adfb8b2e-83f8-46ba-b7df-60f7c52bde9c}AsyncServiceBrokerRequest{asyncAccepted=false}AsyncParameterizedServiceInstanceRequest{parameters={}, context=Context{platform='cloudfoundry', properties={spaceGuid=ae31a4ce-f56a-4050-8f2e-f54e4bc59ac3, spaceName=cf-redis, organizationName=service-sandbox, organizationGuid=b65a1232-add9-49ab-8bf1-283ddc08c0de}}}CreateServiceInstanceBindingRequest{serviceDefinitionId='EEA47C3A-569C-4C24-869D-0ADB5B337A4C', planId='C210CA06-E7E5-4F5D-A5AA-7A2C51CC290E', appGuid='null', bindResource=BindResource{appGuid='null', route='null', properties={credential_client_id=cc_service_key_client}}, serviceInstanceId='b28308b7-78b9-4ec3-9e45-e888ac5f97aa', bindingId='d1947fb1-a1be-4cc2-a231-4d0c73942b2c'} and osb response: CreateServiceInstanceBindingResponse{bindingExisted=false}CreateServiceInstanceAppBindingResponse{credentials={host=192.168.30.190, password=3d63e230-1ea0-4886-a10c-0095692e5e6d, port=46485}, syslogDrainUrl='null', volumeMounts=[], endpoints=[]}

         */
        assertSecurityGroupCreated(bindResource, TEST_URI_WITH_IP_ADDRESS);
    }

    @Test
    public void should_create_security_group_for_a_service_binding_with_ip_address() {
        //Given a service binding request referencing an app
        BindResource bindResource = BindResource.builder()
            .appGuid("app_guid")
            .build();
        //Given other prereqs, when request is received then security group is created
        assertSecurityGroupCreated(bindResource, TEST_URI_WITH_IP_ADDRESS);
    }

    @Test
    public void should_create_security_group_for_a_service_binding_with_fqdn() throws UnknownHostException {
        //given localhost resolves only to 127.0.0.1
        assertThat(InetAddress.getAllByName("localhost")).containsExactly(
            InetAddress.getByAddress(new byte[] { 127, 0, 0, 1 }));

        //Given a service binding request referencing an app
        BindResource bindResource = BindResource.builder()
            .appGuid("app_guid")
            .build();
        //Given other prereqs, when request is received then security group is created
        assertSecurityGroupCreated(bindResource, TEST_URI_WITH_FQDN);
    }

    private void assertSecurityGroupCreated(BindResource bindResource, String uri) {
        givenServicePlan(this.cloudFoundryClient, "plan-id", "service-id");
        givenService(this.cloudFoundryClient, "service-id", "service-broker-id");
        givenServiceBroker(this.cloudFoundryClient, "service-broker-id", "service-broker-name");
        givenServiceInstance(this.cloudFoundryClient, "service-instance-id", "service-instance-name", "plan-id");
        givenCreateSecurityGroupsSucceeds(this.cloudFoundryClient, "test-securitygroup-name");


        Map<String, Object> credentials = new HashMap<>();
        credentials.put("uri", uri);

        createSecurityGroup
            .run(
                CreateServiceInstanceBindingRequest.builder()
                    .serviceDefinitionId("service-id")
                    .planId("plan-id")
                    .bindResource(bindResource)
                    .bindingId("test-securitygroup-name")
                    .serviceInstanceId("service-instance-id")
                    .context(CloudFoundryContext.builder()
                        .spaceGuid("space_id")
                        //Unnecessary details omitted for now
//                        .spaceName("space_name")
//                        .organizationGuid("org_guid")
//                        .organizationName("org_name")
                        .build())
                    .build(),
                CreateServiceInstanceAppBindingResponse.builder()
                    .credentials(credentials).build()
            );

        Mockito.verify(cloudFoundryClient.securityGroups())
            .create(CreateSecurityGroupRequest.builder()
                .name("test-securitygroup-name")
                .spaceId("space_id")
                .rule(RuleEntity.builder()
                    .description(RULE_DESCRIPTION)
                    .protocol(Protocol.TCP)
                    .ports("3306")
                    .destination("127.0.0.1")
                    .build())
                .build());
    }

    @Test(expected = ClientV2Exception.class)
    public void fail_to_create_create_security_group_should_raise_exception_so_that_CC_requests_unbinding_action_to_clean_up_target_broker_related_resources() {
        givenServicePlan(this.cloudFoundryClient, "plan-id", "service-id");
        givenService(this.cloudFoundryClient, "service-id", "service-broker-id");
        givenServiceBroker(this.cloudFoundryClient, "service-broker-id", "service-broker-name");
        givenServiceInstance(this.cloudFoundryClient, "service-instance-id", "service-instance-name", "plan-id");
        givenCreateSecurityGroupsFails(this.cloudFoundryClient, "test-securitygroup-name");

        Map<String, Object> credentials = new HashMap<>();
        credentials.put("uri", TEST_URI_WITH_IP_ADDRESS);

        createSecurityGroup
                .run(
                    CreateServiceInstanceBindingRequest.builder()
                        .serviceDefinitionId("service-id")
                        .planId("plan-id")
                        .bindResource(BindResource.builder()
                            .appGuid("app_guid")
                            .build())
                        .bindingId("test-securitygroup-name")
                        .serviceInstanceId("service-instance-id")
                        .context(CloudFoundryContext.builder()
                            .spaceGuid("space_id")
                            .build())
                        .build()
                    , CreateServiceInstanceAppBindingResponse.builder()
                        .credentials(credentials).build()
                );

    }

    @Test(expected = ClientV2Exception.class)
    public void should_block_until_create_security_group_returns() {
        givenServicePlan(this.cloudFoundryClient, "plan-id", "service-id");
        givenService(this.cloudFoundryClient, "service-id", "service-broker-id");
        givenServiceBroker(this.cloudFoundryClient, "service-broker-id", "service-broker-name");
        givenServiceInstance(this.cloudFoundryClient, "service-instance-id", "service-instance-name", "plan-id");
        givenCreateSecurityGroupsFailsWithDelay(this.cloudFoundryClient, "test-securitygroup-name");

        Map<String, Object> credentials = new HashMap<>();
        credentials.put("uri", TEST_URI_WITH_IP_ADDRESS);

        createSecurityGroup
                .run(
                    CreateServiceInstanceBindingRequest.builder()
                        .serviceDefinitionId("service-id")
                        .planId("plan-id")
                        .bindResource(BindResource.builder()
                            .appGuid("app_guid")
                            .build())
                        .bindingId("test-securitygroup-name")
                        .serviceInstanceId("service-instance-id")
                        .context(CloudFoundryContext.builder()
                            .spaceGuid("space_id")
                            .build())
                        .build(),
                    CreateServiceInstanceAppBindingResponse.builder()
                        .credentials(credentials).build());

        Mockito.verify(cloudFoundryClient.securityGroups())
                .create(CreateSecurityGroupRequest.builder()
                        .name("test-securitygroup-name")
                        .spaceId("space_id")
                        .rule(RuleEntity.builder()
                                .description(RULE_DESCRIPTION)
                                .protocol(Protocol.TCP)
                                .ports("3306")
                                .destination("127.0.0.1")
                                .build())
                        .build());
    }

    private void givenCreateSecurityGroupsFails(CloudFoundryClient cloudFoundryClient, String securityGroupName) {
        given(cloudFoundryClient.securityGroups()
                .create(CreateSecurityGroupRequest.builder()
                        .name(securityGroupName)
                        .spaceId("space_id")
                        .rule(RuleEntity.builder()
                                .description(RULE_DESCRIPTION)
                                .protocol(Protocol.TCP)
                                .ports("3306")
                                .destination("127.0.0.1")
                                .build())
                        .build()))
                .willReturn(Mono.error(new ClientV2Exception(null, 999, "test-exception-description", "test-exception-errorCode")));
    }

    private void givenCreateSecurityGroupsFailsWithDelay(CloudFoundryClient cloudFoundryClient, String securityGroupName) {
        given(cloudFoundryClient.securityGroups()
                .create(CreateSecurityGroupRequest.builder()
                        .name(securityGroupName)
                        .spaceId("space_id")
                        .rule(RuleEntity.builder()
                                .description(RULE_DESCRIPTION)
                                .protocol(Protocol.TCP)
                                .ports("3306")
                                .destination("127.0.0.1")
                                .build())
                        .build()))
                .willReturn(Mono
                        .delay(Duration.ofSeconds(2))
                        .then(Mono.error(new ClientV2Exception(null, 999, "test-exception-description", "test-exception-errorCode"))));
    }

    private void givenCreateSecurityGroupsSucceeds(CloudFoundryClient cloudFoundryClient, String securityGroupName) {
        given(cloudFoundryClient.securityGroups()
                .create(CreateSecurityGroupRequest.builder()
                        .name(securityGroupName)
                        .spaceId("space_id")
                        .rule(RuleEntity.builder()
                                .description(RULE_DESCRIPTION)
                                .protocol(Protocol.TCP)
                                .ports("3306")
                                .destination("127.0.0.1")
                                .build())
                        .build()))
                .willReturn(Mono.just(CreateSecurityGroupResponse.builder()
                        .entity(SecurityGroupEntity.builder()
                                .name(securityGroupName)
                                .rule(RuleEntity.builder()
                                        .protocol(Protocol.TCP)
                                        .ports("3306")
                                        .destination("127.0.0.1")
                                        .build())
                                .build())
                        .build()));
    }

    @Test(expected = IllegalArgumentException.class)
    public void noHostname() {
        CreateServiceInstanceBindingRequest request = CreateServiceInstanceBindingRequest.builder()
            .bindResource(BindResource.builder()
                .appGuid("app_guid")
                .build())
            .build();
        Map<String, Object> credentials = new HashMap<>();
        credentials.put("uri", NO_HOST_URI);
        CreateServiceInstanceAppBindingResponse response =
            CreateServiceInstanceAppBindingResponse.builder()
                .credentials(credentials)
                .build();

        createSecurityGroup.run(request, response);
    }

    @Test(expected = IllegalArgumentException.class)
    public void noPort() {
        CreateServiceInstanceBindingRequest request = CreateServiceInstanceBindingRequest.builder()
            .bindResource(BindResource.builder()
                .appGuid("app_guid")
                .build())
            .build();
        Map<String, Object> credentials = new HashMap<>();
        credentials.put("uri", NO_PORT_URI);
        CreateServiceInstanceAppBindingResponse response =
            CreateServiceInstanceAppBindingResponse.builder()
                .credentials(credentials)
            .build();

        createSecurityGroup.run(request, response);
    }

    @Test(expected = CreateSecurityGroup.NotAllowedDestination.class)
    public void should_reject_security_group_with_destination_out_of_range() {
        givenService(this.cloudFoundryClient, "service-id", "service-broker-id");
        givenServiceBroker(this.cloudFoundryClient, "service-broker-id", "service-broker-name");
        givenServiceInstance(this.cloudFoundryClient, "service-instance-id", "service-instance-name", "plan-id");
        givenCreateSecurityGroupsSucceeds(this.cloudFoundryClient, "test-securitygroup-name");

        Map<String, Object> credentials = new HashMap<>();
        credentials.put("uri", TEST_URI_WITH_IP_ADDRESS);

        final TrustedDestinationSpecification trustedDestinationSpecification = new TrustedDestinationSpecification(
                ImmutableTrustedDestination.builder()
                        .hosts(ImmutableCIDR.of("192.168.0.1/29"))
                        .ports(ImmutablePorts.builder()
                                .addValue(ImmutablePort.of(3306))
                                .build())
                        .build());

        CreateSecurityGroup createSecurityGroupWithRestrictiveDestinationRange = new CreateSecurityGroup(cloudFoundryClient, trustedDestinationSpecification);

        createSecurityGroupWithRestrictiveDestinationRange
                .run(CreateServiceInstanceBindingRequest.builder()
                        .serviceDefinitionId("service-id")
                        .planId("plan-id")
                        .bindResource(BindResource.builder()
                            .appGuid("app_guid")
                            .build())
                        .bindingId("test-securitygroup-name")
                        .serviceInstanceId("service-instance-id")
                        .context(CloudFoundryContext.builder()
                            .spaceGuid("space_id")
                            .build())
                        .build(),
                    CreateServiceInstanceAppBindingResponse.builder()
                        .credentials(credentials).build());

        Mockito.verify(cloudFoundryClient.securityGroups())
                .create(CreateSecurityGroupRequest.builder()
                        .name("test-securitygroup-name")
                        .spaceId("space_id")
                        .rule(RuleEntity.builder()
                                .description(RULE_DESCRIPTION)
                                .protocol(Protocol.TCP)
                                .ports("3306")
                                .destination("127.0.0.1")
                                .build())
                        .build());
    }

}